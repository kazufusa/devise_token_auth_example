require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe UsersController, type: :controller do
  before(:each) do
    @users = FactoryBot.create_list(:user, 10)
    allow(controller).to receive(:authenticate_admin!).and_return true
  end

  describe "GET #index" do
    it "returns a success response" do
      get :index, params: {}
      expect(response).to be_successful
      json = JSON.parse(response.body)
      expect(json.length).to eq(User.all.count)
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      user = @users[3]
      get :show, params: {id: user.id}
      expect(response).to be_successful

      json = JSON.parse(response.body)
      expect(json["id"]).to eq(user.id)
      expect(json["name"]).to eq(user.name)
      expect(json["email"]).to eq(user.email)
      expect(json["is_confirmed"]).to eq(user.confirmed_at != nil)
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested user" do
      user = @users[3]
      expect {
        delete :destroy, params: {id: user.id}
      }.to change(User, :count).by(-1)
      expect(response).to be_successful
    end
  end

  describe "POST #lock" do
    let(:user) { @users[0] }
    let(:response) { post :lock, params: {id: user.id} }

    it "locks the requested user and send notification" do
      expect(response).to be_successful
      user.reload
      expect(user.locked_at).not_to be_nil
      expect(user.failed_attempts).not_to eq(0)

      expect(ActionMailer::Base.deliveries.last).to be_present
      expect(ActionMailer::Base.deliveries.last.to).to contain_exactly user.email
    end
  end

  describe "POST #unlock" do
    let(:user) { FactoryBot.create(:user, locked_at: Time.now.utc, failed_attempts: 6) }
    let(:response) { post :unlock, params: {id: user.id} }
    before(:each) do
      ActionMailer::Base.deliveries.clear
    end

    it "unlocks the requested user and send notification" do
      expect(response).to be_successful
      user.reload
      expect(user.locked_at).to be_nil
      expect(user.failed_attempts).to eq(0)

      expect(ActionMailer::Base.deliveries.last).to be_present
      expect(ActionMailer::Base.deliveries.last.to).to contain_exactly user.email
    end
  end
end
